// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mycat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mycat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

namespace {

const ::google::protobuf::Descriptor* MycatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MycatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MycatReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MycatReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mycat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mycat_2eproto() {
  protobuf_AddDesc_mycat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mycat.proto");
  GOOGLE_CHECK(file != NULL);
  MycatRequest_descriptor_ = file->message_type(0);
  static const int MycatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MycatRequest, parmslist_),
  };
  MycatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MycatRequest_descriptor_,
      MycatRequest::internal_default_instance(),
      MycatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MycatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MycatRequest, _internal_metadata_));
  MycatReply_descriptor_ = file->message_type(1);
  static const int MycatReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MycatReply, message_),
  };
  MycatReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MycatReply_descriptor_,
      MycatReply::internal_default_instance(),
      MycatReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(MycatReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MycatReply, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mycat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MycatRequest_descriptor_, MycatRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MycatReply_descriptor_, MycatReply::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mycat_2eproto() {
  MycatRequest_default_instance_.Shutdown();
  delete MycatRequest_reflection_;
  MycatReply_default_instance_.Shutdown();
  delete MycatReply_reflection_;
}

void protobuf_InitDefaults_mycat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  MycatRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MycatReply_default_instance_.DefaultConstruct();
  MycatRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MycatReply_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mycat_2eproto_once_);
void protobuf_InitDefaults_mycat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mycat_2eproto_once_,
                 &protobuf_InitDefaults_mycat_2eproto_impl);
}
void protobuf_AddDesc_mycat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mycat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mycat.proto\022\nhelloworld\"!\n\014MycatReques"
    "t\022\021\n\tparmsList\030\001 \001(\t\"\035\n\nMycatReply\022\017\n\007me"
    "ssage\030\001 \001(\t2\312\001\n\005Mycat\022>\n\010addTable\022\030.hell"
    "oworld.MycatRequest\032\026.helloworld.MycatRe"
    "ply\"\000\022>\n\010delTable\022\030.helloworld.MycatRequ"
    "est\032\026.helloworld.MycatReply\"\000\022A\n\013handleT"
    "able\022\030.helloworld.MycatRequest\032\026.hellowo"
    "rld.MycatReply\"\000B\'\n\021io.grpc.wyq.mycatB\nM"
    "ycatProtoP\001\242\002\003WYQb\006proto3", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mycat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mycat_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mycat_2eproto_once_);
void protobuf_AddDesc_mycat_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mycat_2eproto_once_,
                 &protobuf_AddDesc_mycat_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mycat_2eproto {
  StaticDescriptorInitializer_mycat_2eproto() {
    protobuf_AddDesc_mycat_2eproto();
  }
} static_descriptor_initializer_mycat_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MycatRequest::kParmsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MycatRequest::MycatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mycat_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.MycatRequest)
}

void MycatRequest::InitAsDefaultInstance() {
}

MycatRequest::MycatRequest(const MycatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.MycatRequest)
}

void MycatRequest::SharedCtor() {
  parmslist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MycatRequest::~MycatRequest() {
  // @@protoc_insertion_point(destructor:helloworld.MycatRequest)
  SharedDtor();
}

void MycatRequest::SharedDtor() {
  parmslist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MycatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MycatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MycatRequest_descriptor_;
}

const MycatRequest& MycatRequest::default_instance() {
  protobuf_InitDefaults_mycat_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MycatRequest> MycatRequest_default_instance_;

MycatRequest* MycatRequest::New(::google::protobuf::Arena* arena) const {
  MycatRequest* n = new MycatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MycatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.MycatRequest)
  parmslist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MycatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.MycatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parmsList = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parmslist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parmslist().data(), this->parmslist().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "helloworld.MycatRequest.parmsList"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.MycatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.MycatRequest)
  return false;
#undef DO_
}

void MycatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.MycatRequest)
  // optional string parmsList = 1;
  if (this->parmslist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parmslist().data(), this->parmslist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "helloworld.MycatRequest.parmsList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parmslist(), output);
  }

  // @@protoc_insertion_point(serialize_end:helloworld.MycatRequest)
}

::google::protobuf::uint8* MycatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.MycatRequest)
  // optional string parmsList = 1;
  if (this->parmslist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parmslist().data(), this->parmslist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "helloworld.MycatRequest.parmsList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parmslist(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:helloworld.MycatRequest)
  return target;
}

size_t MycatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.MycatRequest)
  size_t total_size = 0;

  // optional string parmsList = 1;
  if (this->parmslist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parmslist());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MycatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.MycatRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MycatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MycatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.MycatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.MycatRequest)
    UnsafeMergeFrom(*source);
  }
}

void MycatRequest::MergeFrom(const MycatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.MycatRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MycatRequest::UnsafeMergeFrom(const MycatRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.parmslist().size() > 0) {

    parmslist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parmslist_);
  }
}

void MycatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.MycatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MycatRequest::CopyFrom(const MycatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.MycatRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MycatRequest::IsInitialized() const {

  return true;
}

void MycatRequest::Swap(MycatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MycatRequest::InternalSwap(MycatRequest* other) {
  parmslist_.Swap(&other->parmslist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MycatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MycatRequest_descriptor_;
  metadata.reflection = MycatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MycatRequest

// optional string parmsList = 1;
void MycatRequest::clear_parmslist() {
  parmslist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MycatRequest::parmslist() const {
  // @@protoc_insertion_point(field_get:helloworld.MycatRequest.parmsList)
  return parmslist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MycatRequest::set_parmslist(const ::std::string& value) {
  
  parmslist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.MycatRequest.parmsList)
}
void MycatRequest::set_parmslist(const char* value) {
  
  parmslist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.MycatRequest.parmsList)
}
void MycatRequest::set_parmslist(const char* value, size_t size) {
  
  parmslist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.MycatRequest.parmsList)
}
::std::string* MycatRequest::mutable_parmslist() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.MycatRequest.parmsList)
  return parmslist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MycatRequest::release_parmslist() {
  // @@protoc_insertion_point(field_release:helloworld.MycatRequest.parmsList)
  
  return parmslist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MycatRequest::set_allocated_parmslist(::std::string* parmslist) {
  if (parmslist != NULL) {
    
  } else {
    
  }
  parmslist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parmslist);
  // @@protoc_insertion_point(field_set_allocated:helloworld.MycatRequest.parmsList)
}

inline const MycatRequest* MycatRequest::internal_default_instance() {
  return &MycatRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MycatReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MycatReply::MycatReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mycat_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.MycatReply)
}

void MycatReply::InitAsDefaultInstance() {
}

MycatReply::MycatReply(const MycatReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.MycatReply)
}

void MycatReply::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MycatReply::~MycatReply() {
  // @@protoc_insertion_point(destructor:helloworld.MycatReply)
  SharedDtor();
}

void MycatReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MycatReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MycatReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MycatReply_descriptor_;
}

const MycatReply& MycatReply::default_instance() {
  protobuf_InitDefaults_mycat_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MycatReply> MycatReply_default_instance_;

MycatReply* MycatReply::New(::google::protobuf::Arena* arena) const {
  MycatReply* n = new MycatReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MycatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.MycatReply)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MycatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.MycatReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "helloworld.MycatReply.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.MycatReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.MycatReply)
  return false;
#undef DO_
}

void MycatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.MycatReply)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "helloworld.MycatReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:helloworld.MycatReply)
}

::google::protobuf::uint8* MycatReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.MycatReply)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "helloworld.MycatReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:helloworld.MycatReply)
  return target;
}

size_t MycatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.MycatReply)
  size_t total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MycatReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.MycatReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MycatReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MycatReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.MycatReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.MycatReply)
    UnsafeMergeFrom(*source);
  }
}

void MycatReply::MergeFrom(const MycatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.MycatReply)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MycatReply::UnsafeMergeFrom(const MycatReply& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void MycatReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.MycatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MycatReply::CopyFrom(const MycatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.MycatReply)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MycatReply::IsInitialized() const {

  return true;
}

void MycatReply::Swap(MycatReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MycatReply::InternalSwap(MycatReply* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MycatReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MycatReply_descriptor_;
  metadata.reflection = MycatReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MycatReply

// optional string message = 1;
void MycatReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MycatReply::message() const {
  // @@protoc_insertion_point(field_get:helloworld.MycatReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MycatReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.MycatReply.message)
}
void MycatReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.MycatReply.message)
}
void MycatReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.MycatReply.message)
}
::std::string* MycatReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.MycatReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MycatReply::release_message() {
  // @@protoc_insertion_point(field_release:helloworld.MycatReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MycatReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:helloworld.MycatReply.message)
}

inline const MycatReply* MycatReply::internal_default_instance() {
  return &MycatReply_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

// @@protoc_insertion_point(global_scope)
